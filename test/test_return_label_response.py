# coding: utf-8

"""
    Shipping APIs

    ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from shipping.models.return_label_response import ReturnLabelResponse

class TestReturnLabelResponse(unittest.TestCase):
    """ReturnLabelResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReturnLabelResponse:
        """Test ReturnLabelResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReturnLabelResponse`
        """
        model = ReturnLabelResponse()
        if include_optional:
            return ReturnLabelResponse(
                from_address = shipping.models.return_label_from_address.returnLabel_fromAddress(
                    address_line1 = '27 Watervw Dr', 
                    email = 'watervw@gmail.com', 
                    city_town = 'Stamford', 
                    country_code = 'US', 
                    name = 'Paul Wright', 
                    phone = '203-555-1213', 
                    postal_code = '06905', 
                    state_province = 'CT', ),
                parcel = shipping.models.shipment_domestic_parcel.shipmentDomestic_parcel(
                    height = 1, 
                    length = 2, 
                    width = 1, 
                    dim_unit = 'IN', 
                    weight_unit = 'OZ', 
                    weight = 1, ),
                correlation_id = 'asas2223',
                service_id = 'PMI',
                parcel_tracking_number = 'UPS2200616731485645',
                shipment_id = 'UPS2200616731485645',
                shipment_options = shipping.models.shipment_options_v2.shipmentOptionsV2(
                    add_to_manifest = True, 
                    print_custom_message = 'Print Message 1', 
                    receipt_option = 'RECEIPT_WITH_INSTRUCTIONS', 
                    print_department = 'department', 
                    print_invoice_number = 'invoicenumber', 
                    print_po_number = 'ponumber', 
                    minimal_address_validation = True, ),
                label_layout = [
                    shipping.models.return_label_response_label_layout_inner.returnLabelResponse_labelLayout_inner(
                        content_type = 'URL', 
                        contents = 'https://prv-labels.gcs.pitneycloud.com/f27ab422546045ae95d10fa810586e29.pdf', 
                        file_format = 'PDF', 
                        size = 'DOC_8X11', 
                        type = 'SHIPPING_LABEL', )
                    ],
                to_address = shipping.models.return_label_response_to_address.returnLabelResponse_toAddress(
                    address_line1 = '70 Hanlan RD', 
                    email = 'email@gmail.com', 
                    city_town = 'Woodbridge', 
                    country_code = 'CA', 
                    name = 'Paul Wright', 
                    phone = '203-555-1213', 
                    postal_code = 'L4L3P6', 
                    state_province = 'ON', ),
                rate = shipping.models.return_label_response_rate.returnLabelResponse_rate(
                    base_charge = 30.1, 
                    carrier = 'UPS', 
                    currency_code = 'USD', 
                    parcel_type = 'LTR', 
                    rate_type_id = 'COMMERCIAL', 
                    service_id = 'NDA', 
                    special_services = [
                        shipping.models.return_label_response_rate_special_services_inner.returnLabelResponse_rate_specialServices_inner(
                            special_service_id = 'PRL', 
                            input_parameters = [
                                shipping.models.return_label_response_rate_special_services_inner_input_parameters_inner.returnLabelResponse_rate_specialServices_inner_inputParameters_inner(
                                    name = 'RETURN_PKG_DESCRIPTION', 
                                    value = 'test', )
                                ], 
                            fee = 1.05, )
                        ], 
                    surcharges = [
                        shipping.models.return_label_response_rate_surcharges_inner.returnLabelResponse_rate_surcharges_inner(
                            fee = 5.88, 
                            name = 'UPS', )
                        ], 
                    total_carrier_charge = 39.56, )
            )
        else:
            return ReturnLabelResponse(
        )
        """

    def testReturnLabelResponse(self):
        """Test ReturnLabelResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
