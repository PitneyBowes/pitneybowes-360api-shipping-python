# coding: utf-8

"""
    Shipping APIs

    ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CustomsInfo(BaseModel):
    """
    CustomsInfo
    """ # noqa: E501
    reason_for_export: Optional[StrictStr] = Field(default=None, description=">-The reason the commodity is being exported. Valid values are: Valid Values : [GIFT COMMERCIAL_SAMPLE MERCHANDISE DOCUMENTS RETURNED_GOODS OTHER SOLD NOT_SOLD]", alias="reasonForExport")
    currency_code: StrictStr = Field(description=">-The type of currency used for the monetary values in this API request. Use three uppercase letters, per ISO 4217. For example, use USD for US Dollars, CAD for Canadian Dollars, and EUR for Euros.", alias="currencyCode")
    eelpfc: Optional[StrictStr] = Field(default=None, description=">- A number provided by the Automated Export System (AES). This field is required if the item is valued at more than $2,500 USD per Schedule B export codes.", alias="EELPFC")
    certificate_number: Optional[StrictStr] = Field(default=None, description="The certificate number associated with the commodity.", alias="certificateNumber")
    comments: Optional[StrictStr] = Field(default=None, description=">-Free form comments regarding the exported shipment entered by the shipper.")
    from_customs_reference: Optional[StrictStr] = Field(default=None, description=">-Free form reference information provided by the requestor of the shipment. Depending on the carrier this information may or may not be rendered on the customs documents.", alias="fromCustomsReference")
    importer_customs_reference: Optional[StrictStr] = Field(default=None, description=">- A reference number used by the importer, such as a VAT number, PO number, or insured number. `Shipments to the EU` : Merchants shipping to the European Union (EU) from outside the EU must provide a VAT or IOSS number. Enter the number in this field and specify the reference type in the importerCustomsReferenceType field.", alias="importerCustomsReference")
    invoice_number: Optional[StrictStr] = Field(default=None, description="The commercial invoice number assigned by the exporter. It is rquired for DHL Express", alias="invoiceNumber")
    license_number: Optional[StrictStr] = Field(default=None, description="The export license number associated with the commodity.", alias="licenseNumber")
    declaration_statement: Optional[StrictStr] = Field(default=None, description="This is declaration statement from the Shipper for the items being shipped.", alias="declarationStatement")
    importer_customs_reference_type: Optional[StrictStr] = Field(default=None, description=">-A reference type used by the importer to determine the type of importerCustomsReference. Valid Values are TAX_CODE, IMPORTER_CODE, VAT_NUMBER, IOSS_NUMBER.", alias="importerCustomsReferenceType")
    insured_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter the insurance fee, if applicable.", alias="insuredAmount")
    insured_number: Optional[StrictStr] = Field(default=None, description=">- If the sender wishes to insure the contents, they complete an insurance receipt and affix the insured numbered label to the package. The insured number label is what this field represents.", alias="insuredNumber")
    sdr_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description=">-When an international parcel is insured, the insured value must be expressed in Special Drawing Rights values. E.g. $100 USD = 66.87 SDR.", alias="sdrValue")
    terms_of_sale: Optional[StrictStr] = Field(default=None, description="Three-digit codes describing Terms of sale required for DHL Express shipments. Terms of sale is some sort of agreement between a buyer and seller which serves the purpose of creating uniform expectations between them. Possible values are- CFR (description- Cost and Freight), CIF (description- Cost, Insurance and Freight), CIP (description- Carriage and Insurance Paid To), DAF (description- Delivered at Frontier), DAP (description- Delivered At Place), DAT (description- Delivered At Terminal), DDP (description- Delivered Duty Paid), DDU (description- Delivered Duty Unpaid), DEQ (description- Delivery ex Quay), DES (description- Delivered ex Ship), DPU (description- Delivered At Place Unloaded), EXW (description- Ex Works), FAS (description- FAS Free Alongside Ship), FCA (description- Free Carrier), FOB (description- FOB Free On Board)", alias="termsOfSale")
    recipient_tax_type: Optional[StrictStr] = Field(default=None, description="The tax type to choose for recipient.", alias="recipientTaxType")
    recipient_tax_id: Optional[StrictStr] = Field(default=None, description="The respective taxID for the taxType chosen", alias="recipientTaxID")
    sender_tax_type: Optional[StrictStr] = Field(default=None, description="The tax type to choose for recipient.", alias="senderTaxType")
    sender_tax_id: Optional[StrictStr] = Field(default=None, description="The respective taxID for the taxType chosen", alias="senderTaxID")
    __properties: ClassVar[List[str]] = ["reasonForExport", "currencyCode", "EELPFC", "certificateNumber", "comments", "fromCustomsReference", "importerCustomsReference", "invoiceNumber", "licenseNumber", "declarationStatement", "importerCustomsReferenceType", "insuredAmount", "insuredNumber", "sdrValue", "termsOfSale", "recipientTaxType", "recipientTaxID", "senderTaxType", "senderTaxID"]

    @field_validator('terms_of_sale')
    def terms_of_sale_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CFR', 'CIF', 'CIP', 'CPT', 'DAF', 'DAP', 'DAT', 'DDP', 'DDU', 'DEQ', 'DES', 'DPU', 'EXW', 'FAS', 'FCA', 'FOB']):
            raise ValueError("must be one of enum values ('CFR', 'CIF', 'CIP', 'CPT', 'DAF', 'DAP', 'DAT', 'DDP', 'DDU', 'DEQ', 'DES', 'DPU', 'EXW', 'FAS', 'FCA', 'FOB')")
        return value

    @field_validator('recipient_tax_type')
    def recipient_tax_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EIN', 'GST', 'RFC', 'VAT']):
            raise ValueError("must be one of enum values ('EIN', 'GST', 'RFC', 'VAT')")
        return value

    @field_validator('sender_tax_type')
    def sender_tax_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EIN', 'GST', 'RFC', 'VAT']):
            raise ValueError("must be one of enum values ('EIN', 'GST', 'RFC', 'VAT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomsInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomsInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reasonForExport": obj.get("reasonForExport"),
            "currencyCode": obj.get("currencyCode"),
            "EELPFC": obj.get("EELPFC"),
            "certificateNumber": obj.get("certificateNumber"),
            "comments": obj.get("comments"),
            "fromCustomsReference": obj.get("fromCustomsReference"),
            "importerCustomsReference": obj.get("importerCustomsReference"),
            "invoiceNumber": obj.get("invoiceNumber"),
            "licenseNumber": obj.get("licenseNumber"),
            "declarationStatement": obj.get("declarationStatement"),
            "importerCustomsReferenceType": obj.get("importerCustomsReferenceType"),
            "insuredAmount": obj.get("insuredAmount"),
            "insuredNumber": obj.get("insuredNumber"),
            "sdrValue": obj.get("sdrValue"),
            "termsOfSale": obj.get("termsOfSale"),
            "recipientTaxType": obj.get("recipientTaxType"),
            "recipientTaxID": obj.get("recipientTaxID"),
            "senderTaxType": obj.get("senderTaxType"),
            "senderTaxID": obj.get("senderTaxID")
        })
        return _obj


