# coding: utf-8

"""
    Shipping APIs

    ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from shipping.models.cancel_shipment_v2 import CancelShipmentV2
from shipping.models.create_shipment_v2_request import CreateShipmentV2Request
from shipping.models.domestic_shipment_response_v2 import DomesticShipmentResponseV2
from shipping.models.reprint_shipment_v2 import ReprintShipmentV2
from shipping.models.shipment_cancel_v2 import ShipmentCancelV2
from shipping.models.shipment_reprint_v2 import ShipmentReprintV2

from shipping.api_client import ApiClient, RequestSerialized
from shipping.api_response import ApiResponse
from shipping.rest import RESTResponseType


class ShipmentByRateShopApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def cancel_shipment_by_id_v2(
        self,
        shipment_cancel_v2: ShipmentCancelV2,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.")] = None,
        x_pb_location_id: Annotated[Optional[StrictStr], Field(description="This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.")] = None,
        x_pb_transaction_id: Annotated[Optional[StrictStr], Field(description="A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client's transaction and the system.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CancelShipmentV2:
        """Cancel Shipment

        The operation cancel/void shipment.

        :param shipment_cancel_v2: (required)
        :type shipment_cancel_v2: ShipmentCancelV2
        :param x_pb_developer_partner_id: The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.
        :type x_pb_developer_partner_id: str
        :param x_pb_location_id: This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.
        :type x_pb_location_id: str
        :param x_pb_transaction_id: A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client's transaction and the system.
        :type x_pb_transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_shipment_by_id_v2_serialize(
            shipment_cancel_v2=shipment_cancel_v2,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            x_pb_location_id=x_pb_location_id,
            x_pb_transaction_id=x_pb_transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CancelShipmentV2",
            '400': "Errors",
            '401': "Error",
            '404': "NotFoundErrors",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cancel_shipment_by_id_v2_with_http_info(
        self,
        shipment_cancel_v2: ShipmentCancelV2,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.")] = None,
        x_pb_location_id: Annotated[Optional[StrictStr], Field(description="This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.")] = None,
        x_pb_transaction_id: Annotated[Optional[StrictStr], Field(description="A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client's transaction and the system.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CancelShipmentV2]:
        """Cancel Shipment

        The operation cancel/void shipment.

        :param shipment_cancel_v2: (required)
        :type shipment_cancel_v2: ShipmentCancelV2
        :param x_pb_developer_partner_id: The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.
        :type x_pb_developer_partner_id: str
        :param x_pb_location_id: This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.
        :type x_pb_location_id: str
        :param x_pb_transaction_id: A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client's transaction and the system.
        :type x_pb_transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_shipment_by_id_v2_serialize(
            shipment_cancel_v2=shipment_cancel_v2,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            x_pb_location_id=x_pb_location_id,
            x_pb_transaction_id=x_pb_transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CancelShipmentV2",
            '400': "Errors",
            '401': "Error",
            '404': "NotFoundErrors",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cancel_shipment_by_id_v2_without_preload_content(
        self,
        shipment_cancel_v2: ShipmentCancelV2,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.")] = None,
        x_pb_location_id: Annotated[Optional[StrictStr], Field(description="This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.")] = None,
        x_pb_transaction_id: Annotated[Optional[StrictStr], Field(description="A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client's transaction and the system.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel Shipment

        The operation cancel/void shipment.

        :param shipment_cancel_v2: (required)
        :type shipment_cancel_v2: ShipmentCancelV2
        :param x_pb_developer_partner_id: The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.
        :type x_pb_developer_partner_id: str
        :param x_pb_location_id: This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.
        :type x_pb_location_id: str
        :param x_pb_transaction_id: A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client's transaction and the system.
        :type x_pb_transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_shipment_by_id_v2_serialize(
            shipment_cancel_v2=shipment_cancel_v2,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            x_pb_location_id=x_pb_location_id,
            x_pb_transaction_id=x_pb_transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CancelShipmentV2",
            '400': "Errors",
            '401': "Error",
            '404': "NotFoundErrors",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cancel_shipment_by_id_v2_serialize(
        self,
        shipment_cancel_v2,
        x_pb_developer_partner_id,
        x_pb_location_id,
        x_pb_transaction_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_pb_developer_partner_id is not None:
            _header_params['X-PB-Developer-Partner-Id'] = x_pb_developer_partner_id
        if x_pb_location_id is not None:
            _header_params['X-PB-LocationId'] = x_pb_location_id
        if x_pb_transaction_id is not None:
            _header_params['X-PB-TransactionId'] = x_pb_transaction_id
        # process the form parameters
        # process the body parameter
        if shipment_cancel_v2 is not None:
            _body_params = shipment_cancel_v2


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/shipments/cancel',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_shipment_v2(
        self,
        create_shipment_v2_request: CreateShipmentV2Request,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.")] = None,
        x_pb_location_id: Annotated[Optional[StrictStr], Field(description="This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.")] = None,
        x_pb_transaction_id: Annotated[Optional[StrictStr], Field(description="A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client's transaction and the system.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DomesticShipmentResponseV2:
        """Create Shipment

        The operation creates a new Shipment or generate a Shipment Label. - To create a domestic shipment, the operation requires   - Domestic addresses 'To' and 'From' locations respectively within the same country   - carrier services, and   - associated special services. - While for the International shipment, the operation requires   - International address(es) for delivery, that is 'To' address must be the international country location(s) and not the same country mentioned in 'From' address   - supported international carrier services   - associated special service(s), and    - customs information. 

        :param create_shipment_v2_request: (required)
        :type create_shipment_v2_request: CreateShipmentV2Request
        :param x_pb_developer_partner_id: The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.
        :type x_pb_developer_partner_id: str
        :param x_pb_location_id: This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.
        :type x_pb_location_id: str
        :param x_pb_transaction_id: A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client's transaction and the system.
        :type x_pb_transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_shipment_v2_serialize(
            create_shipment_v2_request=create_shipment_v2_request,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            x_pb_location_id=x_pb_location_id,
            x_pb_transaction_id=x_pb_transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DomesticShipmentResponseV2",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_shipment_v2_with_http_info(
        self,
        create_shipment_v2_request: CreateShipmentV2Request,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.")] = None,
        x_pb_location_id: Annotated[Optional[StrictStr], Field(description="This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.")] = None,
        x_pb_transaction_id: Annotated[Optional[StrictStr], Field(description="A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client's transaction and the system.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DomesticShipmentResponseV2]:
        """Create Shipment

        The operation creates a new Shipment or generate a Shipment Label. - To create a domestic shipment, the operation requires   - Domestic addresses 'To' and 'From' locations respectively within the same country   - carrier services, and   - associated special services. - While for the International shipment, the operation requires   - International address(es) for delivery, that is 'To' address must be the international country location(s) and not the same country mentioned in 'From' address   - supported international carrier services   - associated special service(s), and    - customs information. 

        :param create_shipment_v2_request: (required)
        :type create_shipment_v2_request: CreateShipmentV2Request
        :param x_pb_developer_partner_id: The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.
        :type x_pb_developer_partner_id: str
        :param x_pb_location_id: This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.
        :type x_pb_location_id: str
        :param x_pb_transaction_id: A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client's transaction and the system.
        :type x_pb_transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_shipment_v2_serialize(
            create_shipment_v2_request=create_shipment_v2_request,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            x_pb_location_id=x_pb_location_id,
            x_pb_transaction_id=x_pb_transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DomesticShipmentResponseV2",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_shipment_v2_without_preload_content(
        self,
        create_shipment_v2_request: CreateShipmentV2Request,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.")] = None,
        x_pb_location_id: Annotated[Optional[StrictStr], Field(description="This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.")] = None,
        x_pb_transaction_id: Annotated[Optional[StrictStr], Field(description="A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client's transaction and the system.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Shipment

        The operation creates a new Shipment or generate a Shipment Label. - To create a domestic shipment, the operation requires   - Domestic addresses 'To' and 'From' locations respectively within the same country   - carrier services, and   - associated special services. - While for the International shipment, the operation requires   - International address(es) for delivery, that is 'To' address must be the international country location(s) and not the same country mentioned in 'From' address   - supported international carrier services   - associated special service(s), and    - customs information. 

        :param create_shipment_v2_request: (required)
        :type create_shipment_v2_request: CreateShipmentV2Request
        :param x_pb_developer_partner_id: The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.
        :type x_pb_developer_partner_id: str
        :param x_pb_location_id: This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.
        :type x_pb_location_id: str
        :param x_pb_transaction_id: A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client's transaction and the system.
        :type x_pb_transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_shipment_v2_serialize(
            create_shipment_v2_request=create_shipment_v2_request,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            x_pb_location_id=x_pb_location_id,
            x_pb_transaction_id=x_pb_transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DomesticShipmentResponseV2",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_shipment_v2_serialize(
        self,
        create_shipment_v2_request,
        x_pb_developer_partner_id,
        x_pb_location_id,
        x_pb_transaction_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_pb_developer_partner_id is not None:
            _header_params['X-PB-Developer-Partner-Id'] = x_pb_developer_partner_id
        if x_pb_location_id is not None:
            _header_params['X-PB-LocationId'] = x_pb_location_id
        if x_pb_transaction_id is not None:
            _header_params['X-PB-TransactionId'] = x_pb_transaction_id
        # process the form parameters
        # process the body parameter
        if create_shipment_v2_request is not None:
            _body_params = create_shipment_v2_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/shipments',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def reprint_shipment_by_id_v2(
        self,
        shipment_reprint_v2: ShipmentReprintV2,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.")] = None,
        x_pb_location_id: Annotated[Optional[StrictStr], Field(description="This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.")] = None,
        x_pb_transaction_id: Annotated[Optional[StrictStr], Field(description="A unique transaction Id provided by the partner which is used to enable debugging and linking between the client's transaction and the system.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReprintShipmentV2:
        """Reprint Shipment

        The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentID returned by the original created shipment request. Use this only if the shipping label in the Create Shipment response is missing or lost.

        :param shipment_reprint_v2: (required)
        :type shipment_reprint_v2: ShipmentReprintV2
        :param x_pb_developer_partner_id: The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.
        :type x_pb_developer_partner_id: str
        :param x_pb_location_id: This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.
        :type x_pb_location_id: str
        :param x_pb_transaction_id: A unique transaction Id provided by the partner which is used to enable debugging and linking between the client's transaction and the system.
        :type x_pb_transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reprint_shipment_by_id_v2_serialize(
            shipment_reprint_v2=shipment_reprint_v2,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            x_pb_location_id=x_pb_location_id,
            x_pb_transaction_id=x_pb_transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReprintShipmentV2",
            '400': "Errors",
            '401': "Error",
            '404': "NotFoundErrors",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def reprint_shipment_by_id_v2_with_http_info(
        self,
        shipment_reprint_v2: ShipmentReprintV2,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.")] = None,
        x_pb_location_id: Annotated[Optional[StrictStr], Field(description="This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.")] = None,
        x_pb_transaction_id: Annotated[Optional[StrictStr], Field(description="A unique transaction Id provided by the partner which is used to enable debugging and linking between the client's transaction and the system.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReprintShipmentV2]:
        """Reprint Shipment

        The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentID returned by the original created shipment request. Use this only if the shipping label in the Create Shipment response is missing or lost.

        :param shipment_reprint_v2: (required)
        :type shipment_reprint_v2: ShipmentReprintV2
        :param x_pb_developer_partner_id: The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.
        :type x_pb_developer_partner_id: str
        :param x_pb_location_id: This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.
        :type x_pb_location_id: str
        :param x_pb_transaction_id: A unique transaction Id provided by the partner which is used to enable debugging and linking between the client's transaction and the system.
        :type x_pb_transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reprint_shipment_by_id_v2_serialize(
            shipment_reprint_v2=shipment_reprint_v2,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            x_pb_location_id=x_pb_location_id,
            x_pb_transaction_id=x_pb_transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReprintShipmentV2",
            '400': "Errors",
            '401': "Error",
            '404': "NotFoundErrors",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def reprint_shipment_by_id_v2_without_preload_content(
        self,
        shipment_reprint_v2: ShipmentReprintV2,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.")] = None,
        x_pb_location_id: Annotated[Optional[StrictStr], Field(description="This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.")] = None,
        x_pb_transaction_id: Annotated[Optional[StrictStr], Field(description="A unique transaction Id provided by the partner which is used to enable debugging and linking between the client's transaction and the system.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Reprint Shipment

        The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentID returned by the original created shipment request. Use this only if the shipping label in the Create Shipment response is missing or lost.

        :param shipment_reprint_v2: (required)
        :type shipment_reprint_v2: ShipmentReprintV2
        :param x_pb_developer_partner_id: The Developer Partner ID is assigned by PB to uniquely identify a Developer's strategic business partners. If the developer is the sole business partner, this field isn't required.
        :type x_pb_developer_partner_id: str
        :param x_pb_location_id: This is the Location ID assigned as per the Developer's and Partner's parsed locations, to which all transactions will be billed. <br /> Partner's location will be used for billing if it is configured, however, in case Partner's location is not given, then the Developer's location will be taken. Developer's location will be the default value. <br /> Additionally, Developers and Partners can use carriers belong to this location only.
        :type x_pb_location_id: str
        :param x_pb_transaction_id: A unique transaction Id provided by the partner which is used to enable debugging and linking between the client's transaction and the system.
        :type x_pb_transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reprint_shipment_by_id_v2_serialize(
            shipment_reprint_v2=shipment_reprint_v2,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            x_pb_location_id=x_pb_location_id,
            x_pb_transaction_id=x_pb_transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReprintShipmentV2",
            '400': "Errors",
            '401': "Error",
            '404': "NotFoundErrors",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _reprint_shipment_by_id_v2_serialize(
        self,
        shipment_reprint_v2,
        x_pb_developer_partner_id,
        x_pb_location_id,
        x_pb_transaction_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_pb_developer_partner_id is not None:
            _header_params['X-PB-Developer-Partner-Id'] = x_pb_developer_partner_id
        if x_pb_location_id is not None:
            _header_params['X-PB-LocationId'] = x_pb_location_id
        if x_pb_transaction_id is not None:
            _header_params['X-PB-TransactionId'] = x_pb_transaction_id
        # process the form parameters
        # process the body parameter
        if shipment_reprint_v2 is not None:
            _body_params = shipment_reprint_v2


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/shipments/reprint',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


