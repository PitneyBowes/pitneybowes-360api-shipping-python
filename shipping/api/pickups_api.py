# coding: utf-8

"""
    Shipping APIs

    ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from shipping.models.get_all_pickups import GetAllPickups
from shipping.models.get_pickup_cancelled_document_request import GetPickupCancelledDocumentRequest
from shipping.models.get_pickup_cancelled_document_response import GetPickupCancelledDocumentResponse
from shipping.models.get_pickup_document import GetPickupDocument
from shipping.models.schedule_pickup200_response import SchedulePickup200Response
from shipping.models.schedule_pickup_cancel_request import SchedulePickupCancelRequest
from shipping.models.schedule_pickup_cancel_response import SchedulePickupCancelResponse
from shipping.models.schedule_pickup_request import SchedulePickupRequest

from shipping.api_client import ApiClient, RequestSerialized
from shipping.api_response import ApiResponse
from shipping.rest import RESTResponseType


class PickupsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def cancel_pickups(
        self,
        schedule_pickup_cancel_request: SchedulePickupCancelRequest,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="This is the Developer Partner ID. When the developer is the only partner, this field is not required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SchedulePickupCancelResponse:
        """Cancel Pickups

        This operation is used to Cancel the scheduled pickup.

        :param schedule_pickup_cancel_request: (required)
        :type schedule_pickup_cancel_request: SchedulePickupCancelRequest
        :param x_pb_developer_partner_id: This is the Developer Partner ID. When the developer is the only partner, this field is not required.
        :type x_pb_developer_partner_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_pickups_serialize(
            schedule_pickup_cancel_request=schedule_pickup_cancel_request,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SchedulePickupCancelResponse",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cancel_pickups_with_http_info(
        self,
        schedule_pickup_cancel_request: SchedulePickupCancelRequest,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="This is the Developer Partner ID. When the developer is the only partner, this field is not required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SchedulePickupCancelResponse]:
        """Cancel Pickups

        This operation is used to Cancel the scheduled pickup.

        :param schedule_pickup_cancel_request: (required)
        :type schedule_pickup_cancel_request: SchedulePickupCancelRequest
        :param x_pb_developer_partner_id: This is the Developer Partner ID. When the developer is the only partner, this field is not required.
        :type x_pb_developer_partner_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_pickups_serialize(
            schedule_pickup_cancel_request=schedule_pickup_cancel_request,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SchedulePickupCancelResponse",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cancel_pickups_without_preload_content(
        self,
        schedule_pickup_cancel_request: SchedulePickupCancelRequest,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="This is the Developer Partner ID. When the developer is the only partner, this field is not required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel Pickups

        This operation is used to Cancel the scheduled pickup.

        :param schedule_pickup_cancel_request: (required)
        :type schedule_pickup_cancel_request: SchedulePickupCancelRequest
        :param x_pb_developer_partner_id: This is the Developer Partner ID. When the developer is the only partner, this field is not required.
        :type x_pb_developer_partner_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_pickups_serialize(
            schedule_pickup_cancel_request=schedule_pickup_cancel_request,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SchedulePickupCancelResponse",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cancel_pickups_serialize(
        self,
        schedule_pickup_cancel_request,
        x_pb_developer_partner_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_pb_developer_partner_id is not None:
            _header_params['X-PB-Developer-Partner-ID'] = x_pb_developer_partner_id
        # process the form parameters
        # process the body parameter
        if schedule_pickup_cancel_request is not None:
            _body_params = schedule_pickup_cancel_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/v1/pickups/cancel',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cancelled_pickup_document(
        self,
        type: Annotated[StrictStr, Field(description="Indicates type of pickup. Supported value is `cancelled`.")],
        get_pickup_cancelled_document_request: GetPickupCancelledDocumentRequest,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="This is the Developer Partner ID. When the developer is the only partner, this field is not required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPickupCancelledDocumentResponse:
        """Cancelled Pickup Document

        This operation is used to get receipt for pickup cancellation. The receipt generated is in PDF format. <br> This operation can create receipt for multiple pickups which are cancelled.

        :param type: Indicates type of pickup. Supported value is `cancelled`. (required)
        :type type: str
        :param get_pickup_cancelled_document_request: (required)
        :type get_pickup_cancelled_document_request: GetPickupCancelledDocumentRequest
        :param x_pb_developer_partner_id: This is the Developer Partner ID. When the developer is the only partner, this field is not required.
        :type x_pb_developer_partner_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancelled_pickup_document_serialize(
            type=type,
            get_pickup_cancelled_document_request=get_pickup_cancelled_document_request,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPickupCancelledDocumentResponse",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cancelled_pickup_document_with_http_info(
        self,
        type: Annotated[StrictStr, Field(description="Indicates type of pickup. Supported value is `cancelled`.")],
        get_pickup_cancelled_document_request: GetPickupCancelledDocumentRequest,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="This is the Developer Partner ID. When the developer is the only partner, this field is not required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPickupCancelledDocumentResponse]:
        """Cancelled Pickup Document

        This operation is used to get receipt for pickup cancellation. The receipt generated is in PDF format. <br> This operation can create receipt for multiple pickups which are cancelled.

        :param type: Indicates type of pickup. Supported value is `cancelled`. (required)
        :type type: str
        :param get_pickup_cancelled_document_request: (required)
        :type get_pickup_cancelled_document_request: GetPickupCancelledDocumentRequest
        :param x_pb_developer_partner_id: This is the Developer Partner ID. When the developer is the only partner, this field is not required.
        :type x_pb_developer_partner_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancelled_pickup_document_serialize(
            type=type,
            get_pickup_cancelled_document_request=get_pickup_cancelled_document_request,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPickupCancelledDocumentResponse",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cancelled_pickup_document_without_preload_content(
        self,
        type: Annotated[StrictStr, Field(description="Indicates type of pickup. Supported value is `cancelled`.")],
        get_pickup_cancelled_document_request: GetPickupCancelledDocumentRequest,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="This is the Developer Partner ID. When the developer is the only partner, this field is not required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancelled Pickup Document

        This operation is used to get receipt for pickup cancellation. The receipt generated is in PDF format. <br> This operation can create receipt for multiple pickups which are cancelled.

        :param type: Indicates type of pickup. Supported value is `cancelled`. (required)
        :type type: str
        :param get_pickup_cancelled_document_request: (required)
        :type get_pickup_cancelled_document_request: GetPickupCancelledDocumentRequest
        :param x_pb_developer_partner_id: This is the Developer Partner ID. When the developer is the only partner, this field is not required.
        :type x_pb_developer_partner_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancelled_pickup_document_serialize(
            type=type,
            get_pickup_cancelled_document_request=get_pickup_cancelled_document_request,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPickupCancelledDocumentResponse",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cancelled_pickup_document_serialize(
        self,
        type,
        get_pickup_cancelled_document_request,
        x_pb_developer_partner_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if type is not None:
            
            _query_params.append(('type', type))
            
        # process the header parameters
        if x_pb_developer_partner_id is not None:
            _header_params['X-PB-Developer-Partner-ID'] = x_pb_developer_partner_id
        # process the form parameters
        # process the body parameter
        if get_pickup_cancelled_document_request is not None:
            _body_params = get_pickup_cancelled_document_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/pickups/document',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_pickup_document(
        self,
        pickup_id: Annotated[StrictStr, Field(description="It specified the pickupId for which PDF receipt is needed.")],
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="This is the Developer Partner ID. When the developer is the only partner, this field is not required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPickupDocument:
        """Get Pickup Document

        This operation returns the scheduled pickup or cancellation receipt in PDF format.

        :param pickup_id: It specified the pickupId for which PDF receipt is needed. (required)
        :type pickup_id: str
        :param x_pb_developer_partner_id: This is the Developer Partner ID. When the developer is the only partner, this field is not required.
        :type x_pb_developer_partner_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pickup_document_serialize(
            pickup_id=pickup_id,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPickupDocument",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_pickup_document_with_http_info(
        self,
        pickup_id: Annotated[StrictStr, Field(description="It specified the pickupId for which PDF receipt is needed.")],
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="This is the Developer Partner ID. When the developer is the only partner, this field is not required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPickupDocument]:
        """Get Pickup Document

        This operation returns the scheduled pickup or cancellation receipt in PDF format.

        :param pickup_id: It specified the pickupId for which PDF receipt is needed. (required)
        :type pickup_id: str
        :param x_pb_developer_partner_id: This is the Developer Partner ID. When the developer is the only partner, this field is not required.
        :type x_pb_developer_partner_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pickup_document_serialize(
            pickup_id=pickup_id,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPickupDocument",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_pickup_document_without_preload_content(
        self,
        pickup_id: Annotated[StrictStr, Field(description="It specified the pickupId for which PDF receipt is needed.")],
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="This is the Developer Partner ID. When the developer is the only partner, this field is not required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Pickup Document

        This operation returns the scheduled pickup or cancellation receipt in PDF format.

        :param pickup_id: It specified the pickupId for which PDF receipt is needed. (required)
        :type pickup_id: str
        :param x_pb_developer_partner_id: This is the Developer Partner ID. When the developer is the only partner, this field is not required.
        :type x_pb_developer_partner_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pickup_document_serialize(
            pickup_id=pickup_id,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPickupDocument",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_pickup_document_serialize(
        self,
        pickup_id,
        x_pb_developer_partner_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if pickup_id is not None:
            _path_params['pickupId'] = pickup_id
        # process the query parameters
        # process the header parameters
        if x_pb_developer_partner_id is not None:
            _header_params['X-PB-Developer-Partner-ID'] = x_pb_developer_partner_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/pickups/{pickupId}/document',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_pickups(
        self,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="This is the Developer Partner ID. When the developer is the only partner, this field is not required.")] = None,
        carrier: Annotated[Optional[StrictStr], Field(description="Indicates CarrierID. If not provided, it would show pickups for all the carriers.")] = None,
        start_date: Annotated[Optional[StrictStr], Field(description="Indicates start date from when you want to see the history. If not provided, it will take today's date.")] = None,
        end_date: Annotated[Optional[StrictStr], Field(description="Indicates end date till you want to see the pickups history. If not provide, it will take today's date.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Indicates status of the pickup(schedule or cancel). If not provided, it will show the response for both status.")] = None,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Indicates page number, if not provided page would be 1.")] = None,
        size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Indicates size of records, if not provided size would be 20")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetAllPickups:
        """Get Pickups

        This operation is used to view the history of pickups scheduled or cancelled for your packages.

        :param x_pb_developer_partner_id: This is the Developer Partner ID. When the developer is the only partner, this field is not required.
        :type x_pb_developer_partner_id: str
        :param carrier: Indicates CarrierID. If not provided, it would show pickups for all the carriers.
        :type carrier: str
        :param start_date: Indicates start date from when you want to see the history. If not provided, it will take today's date.
        :type start_date: str
        :param end_date: Indicates end date till you want to see the pickups history. If not provide, it will take today's date.
        :type end_date: str
        :param status: Indicates status of the pickup(schedule or cancel). If not provided, it will show the response for both status.
        :type status: str
        :param page: Indicates page number, if not provided page would be 1.
        :type page: float
        :param size: Indicates size of records, if not provided size would be 20
        :type size: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pickups_serialize(
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            carrier=carrier,
            start_date=start_date,
            end_date=end_date,
            status=status,
            page=page,
            size=size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAllPickups",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_pickups_with_http_info(
        self,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="This is the Developer Partner ID. When the developer is the only partner, this field is not required.")] = None,
        carrier: Annotated[Optional[StrictStr], Field(description="Indicates CarrierID. If not provided, it would show pickups for all the carriers.")] = None,
        start_date: Annotated[Optional[StrictStr], Field(description="Indicates start date from when you want to see the history. If not provided, it will take today's date.")] = None,
        end_date: Annotated[Optional[StrictStr], Field(description="Indicates end date till you want to see the pickups history. If not provide, it will take today's date.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Indicates status of the pickup(schedule or cancel). If not provided, it will show the response for both status.")] = None,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Indicates page number, if not provided page would be 1.")] = None,
        size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Indicates size of records, if not provided size would be 20")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetAllPickups]:
        """Get Pickups

        This operation is used to view the history of pickups scheduled or cancelled for your packages.

        :param x_pb_developer_partner_id: This is the Developer Partner ID. When the developer is the only partner, this field is not required.
        :type x_pb_developer_partner_id: str
        :param carrier: Indicates CarrierID. If not provided, it would show pickups for all the carriers.
        :type carrier: str
        :param start_date: Indicates start date from when you want to see the history. If not provided, it will take today's date.
        :type start_date: str
        :param end_date: Indicates end date till you want to see the pickups history. If not provide, it will take today's date.
        :type end_date: str
        :param status: Indicates status of the pickup(schedule or cancel). If not provided, it will show the response for both status.
        :type status: str
        :param page: Indicates page number, if not provided page would be 1.
        :type page: float
        :param size: Indicates size of records, if not provided size would be 20
        :type size: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pickups_serialize(
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            carrier=carrier,
            start_date=start_date,
            end_date=end_date,
            status=status,
            page=page,
            size=size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAllPickups",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_pickups_without_preload_content(
        self,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="This is the Developer Partner ID. When the developer is the only partner, this field is not required.")] = None,
        carrier: Annotated[Optional[StrictStr], Field(description="Indicates CarrierID. If not provided, it would show pickups for all the carriers.")] = None,
        start_date: Annotated[Optional[StrictStr], Field(description="Indicates start date from when you want to see the history. If not provided, it will take today's date.")] = None,
        end_date: Annotated[Optional[StrictStr], Field(description="Indicates end date till you want to see the pickups history. If not provide, it will take today's date.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Indicates status of the pickup(schedule or cancel). If not provided, it will show the response for both status.")] = None,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Indicates page number, if not provided page would be 1.")] = None,
        size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Indicates size of records, if not provided size would be 20")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Pickups

        This operation is used to view the history of pickups scheduled or cancelled for your packages.

        :param x_pb_developer_partner_id: This is the Developer Partner ID. When the developer is the only partner, this field is not required.
        :type x_pb_developer_partner_id: str
        :param carrier: Indicates CarrierID. If not provided, it would show pickups for all the carriers.
        :type carrier: str
        :param start_date: Indicates start date from when you want to see the history. If not provided, it will take today's date.
        :type start_date: str
        :param end_date: Indicates end date till you want to see the pickups history. If not provide, it will take today's date.
        :type end_date: str
        :param status: Indicates status of the pickup(schedule or cancel). If not provided, it will show the response for both status.
        :type status: str
        :param page: Indicates page number, if not provided page would be 1.
        :type page: float
        :param size: Indicates size of records, if not provided size would be 20
        :type size: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pickups_serialize(
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            carrier=carrier,
            start_date=start_date,
            end_date=end_date,
            status=status,
            page=page,
            size=size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAllPickups",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_pickups_serialize(
        self,
        x_pb_developer_partner_id,
        carrier,
        start_date,
        end_date,
        status,
        page,
        size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if carrier is not None:
            
            _query_params.append(('carrier', carrier))
            
        if start_date is not None:
            
            _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            
            _query_params.append(('endDate', end_date))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        # process the header parameters
        if x_pb_developer_partner_id is not None:
            _header_params['X-PB-Developer-Partner-ID'] = x_pb_developer_partner_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/pickups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def schedule_pickup(
        self,
        schedule_pickup_request: SchedulePickupRequest,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="This is the Developer Partner ID. When the developer is the only partner, this field is not required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SchedulePickup200Response:
        """Schedule Pickup

        This operation allows to schedule Pickups with USPS, UPS, FedEx and DHLExpress for eligible shipments. <br> Below are four possible combinations for scheduling pickup <br>  <br> 1. When request does not specify `pickupSummary` and `shipmentIds`- The system would consider all eligible shipments created in a current day. <br> 2. When request specifies only `shipmentIds`- Pickup will be created for the shipmentIds mentioned <br> 3. When request specifies only `pickupSummary`- Pickup will be created for the pickup details mentioned in the pickupSummary <br> 4. When request specifies both `pickupSummary` and `shipmentIds`- Pickup will be created including details mentioned in both objects.

        :param schedule_pickup_request: (required)
        :type schedule_pickup_request: SchedulePickupRequest
        :param x_pb_developer_partner_id: This is the Developer Partner ID. When the developer is the only partner, this field is not required.
        :type x_pb_developer_partner_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._schedule_pickup_serialize(
            schedule_pickup_request=schedule_pickup_request,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SchedulePickup200Response",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def schedule_pickup_with_http_info(
        self,
        schedule_pickup_request: SchedulePickupRequest,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="This is the Developer Partner ID. When the developer is the only partner, this field is not required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SchedulePickup200Response]:
        """Schedule Pickup

        This operation allows to schedule Pickups with USPS, UPS, FedEx and DHLExpress for eligible shipments. <br> Below are four possible combinations for scheduling pickup <br>  <br> 1. When request does not specify `pickupSummary` and `shipmentIds`- The system would consider all eligible shipments created in a current day. <br> 2. When request specifies only `shipmentIds`- Pickup will be created for the shipmentIds mentioned <br> 3. When request specifies only `pickupSummary`- Pickup will be created for the pickup details mentioned in the pickupSummary <br> 4. When request specifies both `pickupSummary` and `shipmentIds`- Pickup will be created including details mentioned in both objects.

        :param schedule_pickup_request: (required)
        :type schedule_pickup_request: SchedulePickupRequest
        :param x_pb_developer_partner_id: This is the Developer Partner ID. When the developer is the only partner, this field is not required.
        :type x_pb_developer_partner_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._schedule_pickup_serialize(
            schedule_pickup_request=schedule_pickup_request,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SchedulePickup200Response",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def schedule_pickup_without_preload_content(
        self,
        schedule_pickup_request: SchedulePickupRequest,
        x_pb_developer_partner_id: Annotated[Optional[StrictStr], Field(description="This is the Developer Partner ID. When the developer is the only partner, this field is not required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Schedule Pickup

        This operation allows to schedule Pickups with USPS, UPS, FedEx and DHLExpress for eligible shipments. <br> Below are four possible combinations for scheduling pickup <br>  <br> 1. When request does not specify `pickupSummary` and `shipmentIds`- The system would consider all eligible shipments created in a current day. <br> 2. When request specifies only `shipmentIds`- Pickup will be created for the shipmentIds mentioned <br> 3. When request specifies only `pickupSummary`- Pickup will be created for the pickup details mentioned in the pickupSummary <br> 4. When request specifies both `pickupSummary` and `shipmentIds`- Pickup will be created including details mentioned in both objects.

        :param schedule_pickup_request: (required)
        :type schedule_pickup_request: SchedulePickupRequest
        :param x_pb_developer_partner_id: This is the Developer Partner ID. When the developer is the only partner, this field is not required.
        :type x_pb_developer_partner_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._schedule_pickup_serialize(
            schedule_pickup_request=schedule_pickup_request,
            x_pb_developer_partner_id=x_pb_developer_partner_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SchedulePickup200Response",
            '400': "Errors",
            '401': "Error",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _schedule_pickup_serialize(
        self,
        schedule_pickup_request,
        x_pb_developer_partner_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_pb_developer_partner_id is not None:
            _header_params['X-PB-Developer-Partner-ID'] = x_pb_developer_partner_id
        # process the form parameters
        # process the body parameter
        if schedule_pickup_request is not None:
            _body_params = schedule_pickup_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/pickups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


