# coding: utf-8

"""
    Shipping APIs

    ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from shipping.models.by_carrier_v2 import ByCarrierV2
from shipping.models.from_address_v2 import FromAddressV2
from shipping.models.parcel_v2 import ParcelV2
from shipping.models.reference_v2 import ReferenceV2
from shipping.models.shipment_domestic_by_carrier_delivery_option import ShipmentDomesticByCarrierDeliveryOption
from shipping.models.shipment_domestic_by_carrier_doc_tab import ShipmentDomesticByCarrierDocTab
from shipping.models.shipment_domestic_by_carrier_metadata_inner import ShipmentDomesticByCarrierMetadataInner
from shipping.models.shipment_domestic_by_carrier_shipment_options import ShipmentDomesticByCarrierShipmentOptions
from shipping.models.to_address_v2 import ToAddressV2
from typing import Optional, Set
from typing_extensions import Self

class ShipmentDomesticByCarrier(BaseModel):
    """
    ShipmentDomesticByCarrier
    """ # noqa: E501
    from_address: FromAddressV2 = Field(alias="fromAddress")
    to_address: ToAddressV2 = Field(alias="toAddress")
    parcel: Optional[ParcelV2] = None
    parcel_type: StrictStr = Field(description="Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection.<br /> ParcelType can have categories like Package, Envelopes, Paks, Boxes, Tube, etc. <br /> `Max length = 30` ", alias="parcelType")
    rate_shop_by: StrictStr = Field(description="RateShop, which is attached to an Enterprise or Location, is done through three approaches: by Carrier, by RateGroup, and by Ruleset. <br />  Through Carrier, customers can choose the carriers as per requirement, based on which services, parcel types, and special services can be selected, and RateShop is done. <br /> Through RateGroup, customers can select the RateGroup, which has been divided into two categories: Cheapest (w.r.t. price) and Fastest (w.r.t. delivery hours). <br /> Through Ruleset, customers can define the Condition/rule for selecting carriers and their services, so they do not need to worry for Rate Shopping every time they create Shipment. For example, For a particular location, they can set one definite carrier, or apply RateGroup - Cheapest/Fastest. Similarly, for a particular amount like below $1000 Dollars, they can select a definite carrier service, based on RateGroup.", alias="rateShopBy")
    by_carrier: Optional[ByCarrierV2] = Field(default=None, alias="byCarrier")
    shipment_options: Optional[ShipmentDomesticByCarrierShipmentOptions] = Field(default=None, alias="shipmentOptions")
    doc_tab: Optional[ShipmentDomesticByCarrierDocTab] = Field(default=None, alias="docTab")
    delivery_confirmation: Optional[StrictStr] = Field(default=None, description="Indicates the supporting special service or document as an evidence of shipment delivery.  For the delivery confirmation, user can select any of the following special services, but they may vary as per the carrier selection. <br />   - Signature Required/ Indirect Signature Required : SIG   - Signed Hard Copy: SIGHC   - Delivery confirmation: DEL_CON   - Proof of age required (18 years) Adult Signature Required: ADULT_SIG   - Proof of age required (19 years): ADULT_SIG_19   - No Signature Required: NO_SIG   - Direct Signature Required: DIRECT_SIG   - Chain of Signature: COS       Carrier specific options:   - UPS supports *SIG and ADULT_SIG*.    - FedEx supports *SIG, ADULT_SIG, NO_SIG, and DIRECT_SIG*.   - Purolator supports *ADULT_SIG, NO_SIG, and COS*.   - GoFor supports *SIG*.   - CPC supports *SIG, SIGHC, DEL_CON, ADULT_SIG, ADULT_SIG_19, and NO_SIG*.     ", alias="deliveryConfirmation")
    handling: Optional[StrictStr] = Field(default=None, description="Few shipments need a special handling, and the reason can be fragile items or highly secured shipments. There might be other case scenarios. In a simple term, this field defines shipment handling, which provides users a capability to select handling options. <br /> User can select any of the following handling options (special services), but they may vary as per the carrier selection.   - Hold For Pickup: HOLD   - Saturday Delivery: SAT_DELIVERY   - UPS Premium Care: PREM_CARE   - Direct Delivery Only: DIRECT   - Additional Handling: ADD_HDL       Carrier specific options:   - UPS supports all handling options mentioned above.    - FedEx supports *HOLD, SAT_DELIVERY, and ADD_HDL*.   - Purolator supports *HOLD, SAT_DELIVERY, and ADD_HDL*.    ")
    insurance: Optional[StrictStr] = Field(default=None, description="Indicates the insurance coverage, which is selected by users while create shipment - rate shopping. User can select below-mentioned special service for insurance:    - Declared Value Surcharge: INS      Carrier specific options:   - UPS, FedEx, Purolator, and CPC support special service *INS*.    ")
    references: Optional[ReferenceV2] = None
    metadata: Optional[List[ShipmentDomesticByCarrierMetadataInner]] = Field(default=None, description="Additional metadata that needs to be stored for this shipment can be added here.<br /> For now, 'Cost Account Name' is supported.")
    label_size: StrictStr = Field(description="Defines the label size of the Shipment, that is, the Shipping Label is available in different Doc Size. <br /> `Max length = 10`", alias="labelSize")
    label_type: StrictStr = Field(description="Defines the type of the Shipment.  <br /> `Max length = 14`", alias="labelType")
    label_format: StrictStr = Field(description="Defines the file/format in which the label is printed.<br /> For ZPL2, DOC_4X6 will be supported, while for PDF, both the sizes are supported. `Max length = 14`", alias="labelFormat")
    printer_alias_name: Optional[StrictStr] = Field(default=None, description="Refers to a printer connected (directly or via network) to a computer. `Max length = 60`", alias="printerAliasName")
    date_of_shipment: Optional[date] = Field(default=None, description="The date when shipment is created/shipped. The format of the Date is YYYY-MM-DD.", alias="dateOfShipment")
    delivery_option: Optional[ShipmentDomesticByCarrierDeliveryOption] = Field(default=None, alias="deliveryOption")
    __properties: ClassVar[List[str]] = ["fromAddress", "toAddress", "parcel", "parcelType", "rateShopBy", "byCarrier", "shipmentOptions", "docTab", "deliveryConfirmation", "handling", "insurance", "references", "metadata", "labelSize", "labelType", "labelFormat", "printerAliasName", "dateOfShipment", "deliveryOption"]

    @field_validator('rate_shop_by')
    def rate_shop_by_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['carrier', 'rateGroup', 'ruleset']):
            raise ValueError("must be one of enum values ('carrier', 'rateGroup', 'ruleset')")
        return value

    @field_validator('delivery_confirmation')
    def delivery_confirmation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SIG', 'SIGHC', 'DEL_CON', 'ADULT_SIG', 'ADULT_SIG_19', 'NO_SIG', 'DIRECT_SIG', 'COS']):
            raise ValueError("must be one of enum values ('SIG', 'SIGHC', 'DEL_CON', 'ADULT_SIG', 'ADULT_SIG_19', 'NO_SIG', 'DIRECT_SIG', 'COS')")
        return value

    @field_validator('handling')
    def handling_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HOLD', 'SAT_DELIVERY', 'PREM_CARE', 'DIRECT', 'ADD_HDL']):
            raise ValueError("must be one of enum values ('HOLD', 'SAT_DELIVERY', 'PREM_CARE', 'DIRECT', 'ADD_HDL')")
        return value

    @field_validator('insurance')
    def insurance_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INS']):
            raise ValueError("must be one of enum values ('INS')")
        return value

    @field_validator('label_size')
    def label_size_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DOC_8X11', 'DOC_4X8', 'DOC_4X6']):
            raise ValueError("must be one of enum values ('DOC_8X11', 'DOC_4X8', 'DOC_4X6')")
        return value

    @field_validator('label_type')
    def label_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SHIPPING_LABEL']):
            raise ValueError("must be one of enum values ('SHIPPING_LABEL')")
        return value

    @field_validator('label_format')
    def label_format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ZPL2', 'PDF']):
            raise ValueError("must be one of enum values ('ZPL2', 'PDF')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShipmentDomesticByCarrier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of from_address
        if self.from_address:
            _dict['fromAddress'] = self.from_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_address
        if self.to_address:
            _dict['toAddress'] = self.to_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parcel
        if self.parcel:
            _dict['parcel'] = self.parcel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of by_carrier
        if self.by_carrier:
            _dict['byCarrier'] = self.by_carrier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipment_options
        if self.shipment_options:
            _dict['shipmentOptions'] = self.shipment_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of doc_tab
        if self.doc_tab:
            _dict['docTab'] = self.doc_tab.to_dict()
        # override the default output from pydantic by calling `to_dict()` of references
        if self.references:
            _dict['references'] = self.references.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item in self.metadata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of delivery_option
        if self.delivery_option:
            _dict['deliveryOption'] = self.delivery_option.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShipmentDomesticByCarrier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fromAddress": FromAddressV2.from_dict(obj["fromAddress"]) if obj.get("fromAddress") is not None else None,
            "toAddress": ToAddressV2.from_dict(obj["toAddress"]) if obj.get("toAddress") is not None else None,
            "parcel": ParcelV2.from_dict(obj["parcel"]) if obj.get("parcel") is not None else None,
            "parcelType": obj.get("parcelType"),
            "rateShopBy": obj.get("rateShopBy"),
            "byCarrier": ByCarrierV2.from_dict(obj["byCarrier"]) if obj.get("byCarrier") is not None else None,
            "shipmentOptions": ShipmentDomesticByCarrierShipmentOptions.from_dict(obj["shipmentOptions"]) if obj.get("shipmentOptions") is not None else None,
            "docTab": ShipmentDomesticByCarrierDocTab.from_dict(obj["docTab"]) if obj.get("docTab") is not None else None,
            "deliveryConfirmation": obj.get("deliveryConfirmation"),
            "handling": obj.get("handling"),
            "insurance": obj.get("insurance"),
            "references": ReferenceV2.from_dict(obj["references"]) if obj.get("references") is not None else None,
            "metadata": [ShipmentDomesticByCarrierMetadataInner.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "labelSize": obj.get("labelSize"),
            "labelType": obj.get("labelType"),
            "labelFormat": obj.get("labelFormat"),
            "printerAliasName": obj.get("printerAliasName"),
            "dateOfShipment": obj.get("dateOfShipment"),
            "deliveryOption": ShipmentDomesticByCarrierDeliveryOption.from_dict(obj["deliveryOption"]) if obj.get("deliveryOption") is not None else None
        })
        return _obj


